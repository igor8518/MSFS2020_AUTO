%option noyywrap

%{
#include <windows.h>
#include <winnt.h>
#include <array>
#include <vector>
#include <stdio.h>
//#include "RobotTokens.h"
#include <math.h>


// Flex использует макрос YY_DECL как основу объявления функции, сканирующей следующий токен.
// По умолчанию значение макроса YY_DECL равно `int yylex()`
// Но мы назовём функцию ScanToken.
#define YY_DECL int ScanToken()
#define fileno _fileno
#define isatty _isatty
int sign;
float lat, lon;


enum TYPEROUTE
{
	NONE,
	FIX,
	FIXOVERFY,
	HDGINTERCEPTTOFIX,
	HDGINTERCEPTFROMFIX,
	TRKINTERCEPTTOFIX,
	TRKINTERCEPTFROMFIX,
	TURNRIGHT,
	TURNLEFT,
	TURNRIGHTOVERFLY,
	TURNLEFTOVERFLY,
	TRKUNTIL,
	TRKUNTILFROMFIX,
	HDGUNTIL,
	HDGVECTORS,
	RNW,
	TRKVECTORS,

};
enum ALT
{
	AT,
	ATORABOVE,
	ATORBELOW,
	ABOVEBELOW,
};

struct sfix
{
	std::string name;
	float lat;
	float lon;
} pfix;
struct sroute
{
	int type;
	int alttype;
	float alt;
	float alt2;
	float speed;
	float radial;
	float trk;
	float hdg;
	float dist;
	float legtime;
	std::string name;
} proute;
struct srnwsid
{
	std::string name;
	std::vector<sroute>* eroute;
	
} prnwsid;
struct ssid
{
	std::string name;
	std::vector<srnwsid>* mroute;
	std::vector<srnwsid>* ernws;
	std::vector<srnwsid>* etrans;
	std::vector<std::string>* ernw;
} psid;
struct ssidstar
{
	std::vector<sfix>* efixes;
	std::vector<ssid>* esids;
	std::vector<ssid>* estars;
	std::vector<ssid>* eapproaches;
} sidstar2; 
std::vector<srnwsid>* PointVector;
std::vector<sroute>* vRoute = NULL;
std::vector<sfix>* vFix = NULL;
enum MODE
{
	ESIDS,
	ESTARS,
	EAPPROACHES,
};
int mode = 0;
std::string stemp;
%}
%x fixes fix latlon ns ew degreeslat degreeslon
%x rnws rnw
%x sids sid sidtrans sidrun scroute rcroute
%x croute fixroute routealt fixspeed trkroute hdgroute routeradial routeradialfix routeuntil trkrouteradial stars star starrnw rnwroute approach approaches trkuntilfrom
%%

\/\/.*\n {/*\/\/.*\n*/}
"GATES".*\n {/*"GATES".*\n*/}
"GATE".*\n {/*"GATE".*\n*/}
"ENDGATES".*\n {/*"ENDGATES".*\n*/}
[ \n\t] {/*[ \n\t]*/}

"FIXES" {
	/*"FIXES"*/
	sidstar2.efixes = new std::vector<sfix>(); 
	BEGIN(fixes);
}
<fixes>FIX {
	/*<fixes>FIX*/
	BEGIN(fix);
}
		
<fix>LATLON {
	/*<fix>LATLON*/
	BEGIN(latlon);
}
<latlon>[N|S] {
	/*<latlon>[N|S]*/
	if (yytext == "N") 
	{
		sign = 0;
	} 
	else 
	{
		sign = 1;
	}; 
	BEGIN(ns);
}
<ns>[0-9]+ {
	/*<ns>[0-9]+*/
	lat = atof(yytext);
	BEGIN(degreeslat);
}
<degreeslat>[0-9]+[\.]?[0-9]* {
	/*<degreeslat>[0-9]+[\.]?[0-9]**/
	float t; 
	t = atof(yytext); 
	lat = lat + t/60.0; 
	if(!sign)
	{
		lat=-lat;
	}; 
	pfix.lat = lat; 
	BEGIN(latlon);
}
<latlon>[E|W] {
	/*<latlon>[E|W]*/
	if (yytext == "E") 
	{
		sign = 0;
	} 
	else 
	{
		sign = 1;
	}; 
	BEGIN(ew);
}
<ew>[0-9]+ {
	/*<ew>[0-9]+*/
	lon = atof(yytext);
	BEGIN(degreeslon);
}
<degreeslon>[0-9]+[\.]?[0-9]* {
	/*<degreeslon>[0-9]+[\.]?[0-9]**/
	float t; 
	t = atof(yytext); 
	lon = lon + t/60.0; 
	if(!sign)
	{
		lon=-lon;
	}; 
	pfix.lon = lon; 
	printf(" lat: %f, lon: %f\n",lat,lon); 
	sidstar2.efixes->push_back(pfix); 
	BEGIN(fixes);
}
<fix>[A-Za-z0-9]+ {
	/*<fix>[A-Za-z0-9]+*/
	pfix.name = std::string(yytext); 
	printf("Fix point: %s with ",yytext);
}
<fixes>"ENDFIXES" {
	/*<fixes>"ENDFIXES"*/
	BEGIN(0);
}

RNWS {
	/*RNWS*/
	printf("Used runways: "); 
	BEGIN(rnws);
}
<rnws>RNW {
	/*<rnws>RNW*/
	BEGIN(rnw);
}
<rnw>[0-9A-Za-z]+ {
	/*<rnw>[0-9A-Za-z]+*/
	printf("%s, ", yytext); 
	BEGIN(rnws);
}
<rnws>ENDRNWS {
	/*<rnws>ENDRNWS*/
	BEGIN(0);
	printf("\b\b\n");
};
. {
	/*.*/
	printf("\nWith out FIX %s\n",yytext);
}



SIDS {
	/*SIDS*/
	mode = ESIDS; 
	sidstar2.esids = new std::vector<ssid>(); 
	printf("SIDs: "); 
	BEGIN(sids);
	psid = {"", NULL, NULL, NULL, NULL};
}
<sids,sid>SID {
	/*<sids,sid>SID*/
	if(psid.name != "") 
	{
		sidstar2.esids->push_back(psid);
	}; 
	psid = {"", NULL, NULL, NULL, NULL}; 
	BEGIN(sid);
}
<sid>ENDSIDS {
	/*<sid>ENDSIDS*/
	/*PointVector->push_back(prnwsid); */
	prnwsid = {"", NULL}; 
	sidstar2.esids->push_back(psid); 
	printf("END"); 
	BEGIN(0);
}
<sid,star>RNW {
	/*<sid>RNW*/
	if (PointVector != NULL)
	{
		//PointVector->push_back(prnwsid); 
	}
	if (psid.ernws == NULL)
	{
		psid.ernws = new std::vector<srnwsid>();
	}; 
	if (psid.ernw == NULL)
	{
		psid.ernw = new std::vector<std::string>();
	}; 
	PointVector = psid.ernws; 
	printf("for runway "); 
	BEGIN(sidrun);
}
<sid,star,approach>TRANSITION {
	/*<sid,star,approach>TRANSITION*/
	if (PointVector != NULL)
	{
		/*PointVector->push_back(prnwsid);*/
	}; 
	if(psid.etrans == NULL)
	{
		psid.etrans = new std::vector<srnwsid>();
	}; 
	PointVector = psid.etrans; 
	printf("with transition "); 
	BEGIN(sidtrans);
}
<sid>[0-9A-Za-z\.]+ {
	/*<sid,star>[0-9A-Za-z\.]+*/
	psid.name = std::string(yytext); 
	printf("SID: %s ", yytext);
	if (psid.mroute == NULL)
	{
		psid.mroute = new std::vector<srnwsid>();
	}
	prnwsid.name = "";
	prnwsid.eroute = new std::vector<sroute>();
	proute = { 0 };
	PointVector = psid.mroute; 
	BEGIN(scroute);
}
<sidrun>[0-9A-Za-z\.]+ {
	/*<sidrun>[0-9A-Za-z\.]+*/
	prnwsid.name = std::string(yytext); 
	psid.ernw->push_back(yytext);
	stemp = prnwsid.name; 
	prnwsid.eroute = new std::vector<sroute>(); 
	
	proute = {0}; 
	printf("%s", yytext); 
	BEGIN(rcroute); 
}
<sidtrans>[0-9A-Za-z\.]+ {
	/*<sidtrans>[0-9A-Za-z\.]+*/
	prnwsid.name = std::string(yytext); 
	prnwsid.eroute = new std::vector<sroute>(); 
	proute = {0}; 
	printf("%s", yytext); 
	BEGIN(croute); 
}


STARS {
	/*STARS*/
	mode = ESTARS; 
	sidstar2.estars = new std::vector<ssid>(); 
	printf("STARSs: "); 
	BEGIN(stars);
	psid = {"", NULL, NULL, NULL,NULL};
}	
<stars,star>STAR {
	/*<stars,star>STAR*/
	if(psid.name != "") 
	{
		sidstar2.estars->push_back(psid);
	}; 
	psid = {"", NULL, NULL, NULL, NULL};
	if(psid.ernws == NULL)
	{
		psid.ernws = new std::vector<srnwsid>();
	}; 
	PointVector = psid.ernws; 
	printf("for runway "); 
	BEGIN(star);
}

<star>ENDSTARS {
	/*<star>ENDSTARS*/
	/*PointVector->push_back(prnwsid);*/ 
	prnwsid = {"", NULL}; 
	sidstar2.estars->push_back(psid); 
	printf("END"); 
	BEGIN(0);
}
<star>RNW {
	/*<star>RNW*/
	if (psid.ernw == NULL)
	{
		psid.ernw = new std::vector<std::string>();
	}; 
	BEGIN(starrnw); 
}
<star>[0-9A-Za-z\.]+ {
	/*<star>[0-9A-Za-z\.]+*/
	psid.name = std::string(yytext); 
	printf("STAR: %s ", yytext);
	if (psid.mroute == NULL)
	{
		psid.mroute = new std::vector<srnwsid>();
	}
	prnwsid.name = "";
	prnwsid.eroute = new std::vector<sroute>();
	proute = { 0 };
	PointVector = psid.mroute; 
	BEGIN(scroute);
}
<starrnw>[0-9A-Za-z\.]+ {
	/*<starrnw>[0-9A-Za-z\.]+*/
	psid.ernw->push_back(std::string(yytext)); 
	BEGIN(star);
};

APPROACHES {
	/*APPROACHES*/
	mode = EAPPROACHES; 
	sidstar2.eapproaches = new std::vector<ssid>(); 
	printf("APPROACHes: "); 
	BEGIN(approaches);
	psid = {"", NULL, NULL, NULL, NULL};
}	
<approaches,approach>APPROACH {
	/*<approaches,approach>APPROACH*/
	if(psid.name != "") 
	{
		sidstar2.eapproaches->push_back(psid);
	}; 
	psid = {"", NULL, NULL, NULL, NULL};
	if(psid.ernws == NULL)
	{
		psid.ernws = new std::vector<srnwsid>();
	}; 
	PointVector = psid.ernws; 
	printf("for runway "); 
	BEGIN(sidrun);
}
<approach>ENDAPPROACHES {
	/*<approach>ENDAPPROACHES*/
	/*PointVector->push_back(prnwsid); */
	prnwsid = {"", NULL}; 
	sidstar2.eapproaches->push_back(psid); 
	printf("END"); 
	BEGIN(0);
}
<approach>[0-9A-Za-z\.]+ {
	/*<approach>[0-9A-Za-z\.]+*/
	psid.name = std::string(yytext); 
	printf("APPROACH: %s ", yytext);
	if (psid.mroute == NULL)
	{
		psid.mroute = new std::vector<srnwsid>();
	}
	prnwsid.name = "";
	prnwsid.eroute = new std::vector<sroute>();
	proute = { 0 };
	PointVector = psid.mroute; 
	BEGIN(croute);
}
		

<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>FIX {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = FIX; BEGIN(fixroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute>RNW {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = RNW; BEGIN(rnwroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>TRK {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; BEGIN(trkroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>HDG {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; BEGIN(hdgroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>TURN[ ]LEFT[ ]DIRECT[ ]FIX {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = TURNLEFT; BEGIN(fixroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>TURN[ ]RIGHT[ ]DIRECT[ ]FIX {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = TURNRIGHT; BEGIN(fixroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>TURN[ ]LEFT[ ]DIRECT[ ]FIX[ ]OVERFLY {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = TURNLEFTOVERFLY; BEGIN(fixroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>TURN[ ]RIGHT[ ]DIRECT[ ]FIX[ ]OVERFLY {if(proute.type != NONE) {prnwsid.eroute->push_back(proute);};proute = {0}; proute.type = TURNRIGHTOVERFLY; BEGIN(fixroute);}
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,rnwroute,scroute,rcroute>\n {
	if(proute.type != NONE) 
	{
		prnwsid.eroute->push_back(proute);
	};
	PointVector->push_back(prnwsid);
	prnwsid = {"", NULL}; 
	proute = {0}; 
	if (mode == ESIDS)
	{
		BEGIN(sid);
	}
	if (mode == ESTARS)
	{
		//psid.name = stemp;
		BEGIN(star);
	}
	if (mode == EAPPROACHES)
	{
		//psid.name = stemp;
		BEGIN(approach);
	}
}

<rnwroute>[0-9A-Za-z]+ {
	proute.name = std::string(yytext); 
	if (psid.ernw == NULL)
	{
		psid.ernw = new std::vector<std::string>();
	}; 
	psid.ernw->push_back(std::string(yytext)); 
}


<fixroute>OVERFLY {proute.type = FIXOVERFY; }
<fixroute>[0-9A-Za-z]+ {proute.name = std::string(yytext); BEGIN(routealt);}
<routealt>[0-9]+ {
	if (proute.alt != 0)
	{
		float t = atoi(yytext);
		if (t > proute.alt)
		{
			proute.alt2 = proute.alt;
			proute.alt = t;
		}
		else
		{
			proute.alt2 = t;
		};
	}
	else
	{
		proute.alt = atoi(yytext); 
	};
}
<routealt>[0-9]+\.[0-9]+ {proute.dist = atof(yytext); BEGIN(trkuntilfrom);}
<routealt>AT[ ]OR[ ]ABOVE {
	if (proute.alttype == ATORBELOW)
	{
		proute.alttype = ABOVEBELOW;
	}
	else
	{
		proute.alttype = ATORABOVE;
	}
	}
<routealt>AT[ ]OR[ ]BELOW {
	if (proute.alttype == ATORABOVE)
	{
		proute.alttype = ABOVEBELOW;
	}
	else
	{
		proute.alttype = ATORBELOW;
	}
	}
<routealt>SPEED {BEGIN(fixspeed); }
<fixspeed>[0-9]+ {proute.speed = atoi(yytext); }

<trkuntilfrom>FROM[ ]FIX {proute.type = TRKUNTILFROMFIX;BEGIN(routeradialfix);}

<trkroute>INTERCEPT[ ]RADIAL { BEGIN(routeradial);}
<trkroute>UNTIL {proute.type = TRKUNTIL; BEGIN(routealt); }
<trkrouteradial>TO[ ]FIX {proute.type = TRKINTERCEPTTOFIX;BEGIN(routeradialfix);}
<trkrouteradial>FROM[ ]FIX {proute.type = TRKINTERCEPTFROMFIX;BEGIN(routeradialfix);}
<routeradialfix>[0-9A-Za-z]+ {proute.name = std::string(yytext); BEGIN(routealt);}
<trkroute>[0-9]+ {proute.trk = atoi(yytext); }
<trkroute>VECTORS {proute.type = TRKVECTORS; BEGIN(routealt);}

<hdgroute>INTERCEPT[ ]RADIAL { BEGIN(routeradial);}
<hdgroute>UNTIL {proute.type = HDGUNTIL; BEGIN(routealt); }
<hdgroute>VECTORS {proute.type = HDGVECTORS; BEGIN(routealt);}
<routeradial>TO[ ]FIX {proute.type = HDGINTERCEPTTOFIX;BEGIN(routeradialfix);}
<routeradial>FROM[ ]FIX {proute.type = HDGINTERCEPTFROMFIX;BEGIN(routeradialfix);}
<routeradial>[0-9]+ {proute.radial = atoi(yytext);}; 
<hdgroute>[0-9]+ {proute.hdg = atoi(yytext); }
<croute,fixroute,routealt,fixspeed,routeradial,routeradialfix,routeuntil,trkrouteradial,scroute,rcroute>[A-Z] {/*MessageBox(0,L"ERR",LPWSTR(yytext),MB_OK);*/}


%%